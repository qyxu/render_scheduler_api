
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, Job, Schedule
from schemas import JobCreate, JobOut, ScheduleCreate, ScheduleOut
from datetime import datetime
import os
from scheduler import run_scheduler_from_db
from scheduler2 import run_scheduler_v2_from_db
from sqlalchemy.exc import IntegrityError
import logging
logger = logging.getLogger(__name__)

DATABASE_URL = os.environ.get("DATABASE_URL")

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False} if "sqlite" in DATABASE_URL else {})
SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)
Base.metadata.create_all(bind=engine)

app = FastAPI(title="Job Shop Scheduler API")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/jobs", response_model=JobOut)
def create_job(job: JobCreate, db: Session = Depends(get_db)):
    try:
        db_job = Job(**job.dict())
        db.add(db_job)
        db.commit()
        db.refresh(db_job)
        return db_job
    except IntegrityError:
        db.rollback()
        logger.warning(f"Duplicate Job ID: {job.job_id}")
        raise HTTPException(status_code=400, detail=f"Job ID '{job.job_id}' already exists")
    except Exception as e:
        db.rollback()
        logger.exception("Failed to create job")
        raise HTTPException(status_code=500, detail="Unexpected error while adding job")

@app.get("/jobs", response_model=list[JobOut])
def get_jobs(db: Session = Depends(get_db)):
    return db.query(Job).all()

@app.post("/schedule", response_model=ScheduleOut)
def create_schedule(schedule: ScheduleCreate, db: Session = Depends(get_db)):
    db_schedule = Schedule(**schedule.dict(), created_at=datetime.utcnow())
    db.add(db_schedule)
    db.commit()
    db.refresh(db_schedule)
    return db_schedule

@app.get("/schedule", response_model=list[ScheduleOut])
def get_schedule(db: Session = Depends(get_db)):
    return db.query(Schedule).all()

@app.post("/run-scheduler")
def run_scheduler_endpoint(db: Session = Depends(get_db)):
    schedule = run_scheduler_from_db(db)
    if not schedule:
        raise HTTPException(status_code=400, detail="No schedule generated")

    db.query(Schedule).delete()
    for entry in schedule:
        db.add(Schedule(
            job_id=entry["job_id"],
            start=entry["start"],
            end=entry["end"],
            created_at=datetime.utcnow()
        ))
    db.commit()
    return {"status": "success", "jobs_scheduled": len(schedule)}

@app.post("/run-scheduler-v1")
def run_scheduler_v1_endpoint(db: Session = Depends(get_db)):
    from scheduler import run_scheduler_from_db
    schedule = run_scheduler_from_db(db)
    if not schedule:
        raise HTTPException(status_code=400, detail="No schedule generated by v1")
    return schedule

@app.post("/run-scheduler-v2")
def run_scheduler_v2_endpoint(db: Session = Depends(get_db)):
    from scheduler2 import run_scheduler_v2_from_db
    schedule = run_scheduler_v2_from_db(db)
    if not schedule:
        raise HTTPException(status_code=400, detail="No schedule generated by v2")
    return schedule
    
@app.delete("/reset")
def reset_data(db: Session = Depends(get_db)):
    db.query(Schedule).delete()
    db.query(Job).delete()
    db.commit()
    return {"status": "reset"}

@app.post("/compare-schedulers")
def compare_schedulers(db: Session = Depends(get_db)):
    jobs = db.query(Job).all()
    v1_schedule = run_scheduler_from_db(db)
    v2_schedule = run_scheduler_v2_from_db(db)
    return v1_schedule + v2_schedule

